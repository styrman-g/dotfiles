#+TITLE: Styrmans GNU Emacs Config
#+AUTHOR: Gustav Hogbring
#+DESCRIPTION: Styrmans personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#setup-package-manager][SETUP PACKAGE MANAGER]]
- [[#setup-icons][SETUP ICONS]]
- [[#setup-my-theme][SETUP MY THEME]]
- [[#setup-some-programs][SETUP SOME PROGRAMS]]
  - [[#setup-a-startscreen][SETUP A STARTSCREEN]]
  - [[#evil-mode][EVIL MODE]]
  - [[#vertico-and-orderless][VERTICO AND ORDERLESS]]
  - [[#install-modeline][INSTALL MODELINE]]
  - [[#some-basic-stuff][SOME BASIC STUFF]]
  - [[#install-elfeed][INSTALL ELFEED]]
  - [[#dired][DIRED]]
  - [[#org-mode][ORG MODE]]
  - [[#flycheck][FLYCHECK]]
  - [[#magit][MAGIT]]

* SETUP PACKAGE MANAGER
#+begin_src emacs-lisp

    ;; Setup the package manager
    (require 'package)
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless package-archive-contents
    (package-refresh-contents))
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t)

#+end_src

* SETUP ICONS
 #+begin_src emacs-lisp

   ;; Setup icons
   (use-package all-the-icons
     :ensure t
     :if (display-graphic-p))

   (use-package all-the-icons-dired
     :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

   ;; TRASH
   (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
 
#+end_src

* SETUP MY THEME

 #+begin_src emacs-lisp
   ;; Setup Catppuccin as theme
   (use-package catppuccin-theme)
   (load-theme 'catppuccin :no-confirm)

#+end_src
* SETUP SOME PROGRAMS
** SETUP A STARTSCREEN

 #+begin_src emacs-lisp
   ;; Setup a startscreen
   (use-package dashboard
     :ensure t 
     :init
     (setq initial-buffer-choice 'dashboard-open)
     (setq dashboard-set-heading-icons t)
     (setq dashboard-set-file-icons t)
     (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
     (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
     (setq dashboard-center-content nil) ;; set to 't' for centered content
     (setq dashboard-items '((recents . 5)
                             (agenda . 5 )
                             (bookmarks . 3)
                             (projects . 3)
                             (registers . 3)))
     :custom 
     (dashboard-modify-heading-icons '((recents . "file-text")
   				      (bookmarks . "book")))
     :config
     (dashboard-setup-startup-hook))

#+end_src

** EVIL MODE

 #+begin_src emacs-lisp
   ;; Download Evil
   (unless (package-installed-p 'evil)
     (package-install 'evil))

   ;; Enable Evil
   (require 'evil)
   (evil-mode 1)

#+end_src

** VERTICO AND ORDERLESS

 #+begin_src emacs-lisp
     (use-package vertico
       :ensure t
       :init (vertico-mode))

     (use-package orderless
     :ensure t
     :custom
     (completion-styles '(orderless basic))
     (completion-category-overrides '((file (styles basic partial-completion)))))

     (use-package consult
       :ensure t
       :bind (
              ("M-s b" . consult-buffer)
              ("M-s g" . consult-grep)
              ("M-s j" . consult-outline)
              ))

#+end_src

** INSTALL MODELINE

#+begin_src emacs-lisp
     ;; MODELINE
     (use-package doom-modeline
       :ensure t
       :init (doom-modeline-mode 1)
       :config
       (setq doom-modeline-height 35      ;; sets modeline height
             doom-modeline-bar-width 5    ;; sets right bar width
             doom-modeline-persp-name t   ;; adds perspective name to modeline
             doom-modeline-persp-icon t)) ;; adds folder icon next to persp name

#+end_src

** SOME BASIC STUFF

#+begin_src emacs-lisp
     ;; Set initial major mode to 'org-mode'
     (setq initial-major-mode 'org-mode


     ;; Disable startup message
     inhibit-startup-message t

     ;; Clear the initial scratch message
     initial-scratch-message nil

     ;; Disable backup files
     make-backup-files nil

     ;; Set Dired listing switches for more minimalist output
     dired-listing-switches "-aghov --group-directories-first")

     ;; Disable the menu bar
     (menu-bar-mode -1)

     ;; Disable the tool bar
     (tool-bar-mode -1)

     ;; Disable the scroll bar
     (scroll-bar-mode -1)

     ;; LINENUMBER
     (global-display-line-numbers-mode 1) ;; Display line numbers

#+end_src

** INSTALL ELFEED

#+begin_src emacs-lisp
     (use-package elfeed
       :config
       (setq elfeed-search-feed-face ":foreground #ffffff :weight bold"
             elfeed-feeds (quote
                            (("https://www.reddit.com/r/linux.rss" reddit linux)
                             ("https://opensource.com/feed" opensource linux)
                             ("https://distrowatch.com/news/dwd.xml" distrowatch linux)))))
#+end_src

** DIRED
#+begin_src emacs-lisp

(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)

#+end_src

** ORG MODE
*** Enabling Table of Contents

#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

*** Enabling Org Bullets
#+begin_src emacs-lisp

(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+end_src


*** Org Level Headers

#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
 '(org-level-6 ((t (:inherit outline-5 :height 1.2))))
 '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))
#+end_src

** FLYCHECK
Install luacheck from your Linux distroâ€™s repositories
for flycheck to work correctly with lua files.  
Install python-pylint for flycheck to work with python files.

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src

** MAGIT

#+begin_src emacs-lisp
(use-package magit)


#+end_src





